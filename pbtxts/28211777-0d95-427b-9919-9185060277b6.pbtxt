control_port: 51881
graph_input: "graph_input1"
graph_input: "graph_input2"
graph_output: "graph_output1"
graph_output: "graph_output2"


node {
  name: "demux_node1"
  calculator: "stream_demux"
  vendor: "Aupera"
  graph_input: "graph_input1"
  output_stream: "packet_stream_demux1"
  output_stream: "video_stream_info_demux1"
  node_options: {
    [type.googleapis.com/aup.avaf.StreamMuxOptions]: {
      demux: {
        rtsp_transport: "tcp"  
        iframe_extract: false
        auto_reconnect: true
      }
    }
  }
}


node {
  name: "decode_node1"
  calculator: "x86_dec"
  vendor: "Aupera"
  input_stream: "packet_stream_demux1"
  input_stream: "video_stream_info_demux1"
  output_stream: "image_stream_decode1"
  output_stream: "video_stream_info_decode1"
  node_options: {
    [type.googleapis.com/aup.avaf.VideoCodecOptions]: {
      dec: {
        name: "u30_dec_h2645"  
        ow: 1920
        oh: 1080
        opixfmt: PIXFMT_BGR24
        queue_size: 12
        low_latency: false
      }
    }
  }
}


node {
  name: "demux_node2"
  calculator: "stream_demux"
  vendor: "Aupera"
  graph_input: "graph_input2"
  output_stream: "packet_stream_demux2"
  output_stream: "video_stream_info_demux2"
  node_options: {
    [type.googleapis.com/aup.avaf.StreamMuxOptions]: {
      demux: {
        rtsp_transport: "tcp"  
        iframe_extract: false
        auto_reconnect: true
      }
    }
  }
}


node {
  name: "decode_node2"
  calculator: "x86_dec"
  input_stream: "packet_stream_demux2"
  input_stream: "video_stream_info_demux2"
  output_stream: "image_stream_decode2"
  output_stream: "video_stream_info_decode2"
  node_options: {
    [type.googleapis.com/aup.avaf.VideoCodecOptions]: {
      dec: {
        name: "u30_dec_h2645"  
        ow: 1920
        oh: 1080
        opixfmt: PIXFMT_BGR24
        queue_size: 12
        low_latency: false
      }
    }
  }
}


node {
  name: "detector"
  calculator: "box_detector"
  input_stream: "image_stream_decode1"
  input_stream: "image_stream_decode2"
  output_stream: "detections_stream1"
  output_stream: "detections_stream2"
  output_stream: "detect_interval"
  stream_sync: {
    drop_strategy: DROP_INCOMPLETE_PACKETS
    timeout_ms: 5000
  }
  node_options: {
    [type.googleapis.com/aup.avaf.BoxDetectorOptions]: {
      detect_interval: 1
      detector_type: "TinyYolo"
      kernel_name: "tiny_yolov3_vmss"
      need_preprocess: true
      log_performance: false
      run_on_letterboxed_img: false
      batch_size: 2
      return_frames_inorder: true
      batch_collection_timeout_ms: 1000000
      detection_threads: 3    
      force_batch_size: false
      mean: {
        r: 0
        g: 0
        b: 0
      }
      scale: {
        ch1: 0.00390625
        ch2: 0.00390625
        ch3: 0.00390625
      }
      label_confidence: {
        label: 0
        confidence: 0.3
      }
      label_confidence: {
        label: 1
        confidence: 0.3
      }
      label_confidence: {
        label: 2
        confidence: 0.3
      }
      label_confidence: {
        label: 3
        confidence: 0.3
      }
      label_confidence: {
        label: 4
        confidence: 0.3
      }
      label_confidence: {
        label: 5
        confidence: 0.3
      }
      label_confidence: {
        label: 6
        confidence: 0.3
      }
      label_confidence: {
        label: 7
        confidence: 0.3
      }
      label_confidence: {
        label: 8
        confidence: 0.3
      }
      label_confidence: {
        label: 9
        confidence: 0.3
      }
      inter_class_nms: {
        labels: 0
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 1
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 2
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 3
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 4
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 5
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 6
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 7
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 8
        threshold: 0.45
      }
      inter_class_nms: {
        labels: 9
        threshold: 0.45
      }
    }
  }
}


node {
  name: "classifier"
  calculator: "box_classifier"
  input_stream: "detections_stream1"
  input_stream: "detections_stream2"
  input_stream: "image_stream_decode1"
  input_stream: "image_stream_decode2"
  output_stream: "classification_stream1"
  output_stream: "classification_stream2"
  node_options: {
    [type.googleapis.com/aup.avaf.BoxClassifierOptions]: {
      classifier_type: "General"
      kernel_name: "resnet50"
      need_preprocess: true
      run_on_letterboxed_img: false
      batch_size: 8
      return_in_order: true
      classification_threads: 1
      batch_collection_timeout_ms: 0
      use_detections: true
      log_performance: false
      max_classification_lib_q_size: 200
    }
  }
}


node {
  name: "visualizer1"
  calculator: "box_visualizer"
  input_stream: "classification_stream1"
  input_stream: "image_stream_decode1"
  output_stream: "image_stream_viz1"
  stream_sync: {
    drop_strategy: DROP_INCOMPLETE_PACKETS
    timeout_ms: 5000
  }
  node_options: {
    [type.googleapis.com/aup.avaf.BoxVisualizerOptions] {
      input_type: INPUT_TYPE_CLASSIFICATION
      text_color: {
        r: 255
        g: 0
        b: 0
      }
      box_color: {
        r: 255
        g: 0
        b: 0
      }
      class_color: {
        label: 1
        color: {
          r: 0
          g: 0
          b: 0
        }
      }
      class_color: {
        label: 2
        color: {
          r: 0
          g: 255
          b: 0
        }
      }
      class_color: {
        label: 3
        color: {
          r: 255
          g: 0
          b: 0
        }
      }
      text_offset: {
        x: 0
        y: 0
      }
      box_thickness: 5
      text_size: 2
      font: 0
      line_type: 0
    }
  }
}


node {
  name: "visualizer2"
  calculator: "box_visualizer"
  input_stream: "classification_stream2"
  input_stream: "image_stream_decode2"
  output_stream: "image_stream_viz2"
  stream_sync: {
    drop_strategy: DROP_INCOMPLETE_PACKETS
    timeout_ms: 5000
  }
  node_options: {
    [type.googleapis.com/aup.avaf.BoxVisualizerOptions] {
      input_type: INPUT_TYPE_CLASSIFICATION
      text_color: {
        r: 255
        g: 0
        b: 0
      }
      box_color: {
        r: 255
        g: 0
        b: 0
      }
      class_color: {
        label: 1
        color: {
          r: 0
          g: 0
          b: 0
        }
      }
      class_color: {
        label: 2
        color: {
          r: 0
          g: 255
          b: 0
        }
      }
      class_color: {
        label: 3
        color: {
          r: 255
          g: 0
          b: 0
        }
      }
      text_offset: {
        x: 0
        y: 0
      }
      box_thickness: 5
      text_size: 2
      font: 0
      line_type: 0
    }
  }
}


node {
  name: "vfilter_node1"
  calculator: "ff_vfilter"
  input_stream: "image_stream_viz1"
  input_stream: "video_stream_info_decode1"
  output_stream: "image_stream_vfilter1"
  output_stream: "video_stream_info_vfilter1"
  node_options: {
    [type.googleapis.com/aup.avaf.VideoFilterOptions]: {
      roi_x: 0
      roi_y: 0
      roi_w: 0
      roi_h: 0
      opixfmt: PIXFMT_I420
      ow: 1280
      oh: 720
      ofps: 25
    }
  }
}


node {
  name: "encode_node1"
  calculator: "x86_enc"
  vendor: "Aupera"
  input_stream: "image_stream_vfilter1"
  input_stream: "video_stream_info_vfilter1"
  output_stream: "packet_stream_encode1"
  output_stream: "codec_context_stream1"
  node_options: {
    [type.googleapis.com/aup.avaf.VideoCodecOptions]: {
     enc: {
       type: H264
       w: 0 
       h: 0
       fps: 0
     }
    }
  }
}


node {
  name: "mux_node1"
  calculator: "stream_mux"
  input_stream: "packet_stream_encode1"
  input_stream: "codec_context_stream1"
  graph_output: "graph_output1"
  node_options: {
    [type.googleapis.com/aup.avaf.StreamMuxOptions]: {
     mux: {
       rtsp_transport: "tcp"
       auto_reconnect: true
     }
    }
  }
}


node {
  name: "vfilter_node2"
  calculator: "ff_vfilter"
  input_stream: "image_stream_viz2"
  input_stream: "video_stream_info_decode2"
  output_stream: "image_stream_vfilter2"
  output_stream: "video_stream_info_vfilter2"
  node_options: {
    [type.googleapis.com/aup.avaf.VideoFilterOptions]: {
      roi_x: 0
      roi_y: 0
      roi_w: 0
      roi_h: 0
      opixfmt: PIXFMT_I420
      ow: 1280
      oh: 720
      ofps: 25 
    }
  }
}


node {
  name: "encode_node2"
  calculator: "x86_enc"
  input_stream: "image_stream_vfilter2"
  input_stream: "video_stream_info_vfilter2"
  output_stream: "packet_stream_encode2"
  output_stream: "codec_context_stream2"
  node_options: {
    [type.googleapis.com/aup.avaf.VideoCodecOptions]: {
     enc: {
       type: H264
       w: 0 
       h: 0
       fps: 0
     }
    }
  }
}


node {
  name: "mux_node2"
  calculator: "stream_mux"
  input_stream: "packet_stream_encode2"
  input_stream: "codec_context_stream2"
  graph_output: "graph_output2"
  node_options: {
    [type.googleapis.com/aup.avaf.StreamMuxOptions]: {
     mux: {
       rtsp_transport: "tcp"
       auto_reconnect: true
     }
    }
  }
}